name: Universal Auto-merge

on:
  pull_request_target:
    types: [opened, reopened, synchronize, labeled]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request_target' ||
      github.event_name == 'pull_request_review' ||
      (github.event_name == 'check_suite' && github.event.check_suite.conclusion == 'success') ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request')

    steps:
      - name: Get PR details
        id: pr-details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get PR number based on event type
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          elif [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          elif [[ "${{ github.event_name }}" == "check_suite" ]]; then
            # Get PR from check suite
            PR_NUMBER=$(gh api repos/${{ github.repository }}/commits/${{ github.event.check_suite.head_sha }}/pulls --jq '.[0].number' || echo "")
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # Get PR from workflow run - try pull_requests array first
            PR_NUMBER=$(echo '${{ toJSON(github.event.workflow_run.pull_requests) }}' | jq -r '.[0].number // empty')

            # Fallback: query by SHA if pull_requests array is empty
            if [[ -z "$PR_NUMBER" ]]; then
              PR_NUMBER=$(gh api repos/${{ github.repository }}/commits/${{ github.event.workflow_run.head_sha }}/pulls --jq '.[0].number' || echo "")
            fi
          fi

          if [[ -z "$PR_NUMBER" ]]; then
            echo "No PR found for this event"
            echo "should-merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT

          # Get PR details
          PR_DATA=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER)
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.user.login')
          PR_LABELS=$(echo "$PR_DATA" | jq -r '.labels[].name' | tr '\n' ' ')
          PR_MERGEABLE_STATE=$(echo "$PR_DATA" | jq -r '.mergeable_state')

          echo "pr-author=$PR_AUTHOR" >> $GITHUB_OUTPUT
          echo "pr-labels=$PR_LABELS" >> $GITHUB_OUTPUT
          echo "pr-mergeable-state=$PR_MERGEABLE_STATE" >> $GITHUB_OUTPUT

          # Determine if we should auto-merge
          SHOULD_MERGE=false

          # Dependabot PRs
          if [[ "$PR_AUTHOR" == "dependabot[bot]" ]]; then
            echo "Dependabot PR detected"
            SHOULD_MERGE=true
          fi

          # Release Please PRs (author can be github-actions[bot] or PAT user)
          if [[ "$PR_LABELS" == *"autorelease"* ]]; then
            echo "Release Please PR detected (label: autorelease)"
            SHOULD_MERGE=true
          fi

          # Manual auto-merge label (only for repository owner/maintainers)
          if [[ "$PR_LABELS" == *"automerge"* ]]; then
            # Only allow automerge label for PRs from repository owner
            REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
            if [[ "$PR_AUTHOR" == "$REPO_OWNER" ]] || [[ "$PR_AUTHOR" == "github-actions[bot]" ]]; then
              echo "Manual automerge label detected from trusted author: $PR_AUTHOR"
              SHOULD_MERGE=true
            else
              echo "Ignoring automerge label from untrusted author: $PR_AUTHOR"
            fi
          fi

          echo "should-merge=$SHOULD_MERGE" >> $GITHUB_OUTPUT

      - name: Check PR status
        if: steps.pr-details.outputs.should-merge == 'true'
        id: check-status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.pr-details.outputs.pr-number }}"

          # Check if all required status checks have passed
          PR_STATUS=$(gh pr checks $PR_NUMBER --repo ${{ github.repository }} --json name,state,bucket)

          # Check for any failing or pending required checks (ignore E2E Tests which are non-blocking)
          FAILED_CHECKS=$(echo "$PR_STATUS" | jq '[.[] | select(.state == "FAILURE" or .state == "ERROR") | select(.name != "E2E Tests")] | length')
          PENDING_CHECKS=$(echo "$PR_STATUS" | jq '[.[] | select(.state == "PENDING" or .state == "QUEUED")] | length')

          if [[ "$FAILED_CHECKS" -gt 0 ]]; then
            echo "PR has failing checks"
            echo "can-merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [[ "$PENDING_CHECKS" -gt 0 ]]; then
            echo "PR has pending checks"
            echo "can-merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check mergeable state
          MERGEABLE_STATE="${{ steps.pr-details.outputs.pr-mergeable-state }}"
          if [[ "$MERGEABLE_STATE" == "clean" ]] || [[ "$MERGEABLE_STATE" == "has_hooks" ]] || [[ "$MERGEABLE_STATE" == "unstable" ]]; then
            echo "PR is mergeable (state: $MERGEABLE_STATE)"
            echo "can-merge=true" >> $GITHUB_OUTPUT
          else
            echo "PR is not mergeable (state: $MERGEABLE_STATE)"
            echo "can-merge=false" >> $GITHUB_OUTPUT
          fi

      - name: Enable auto-merge
        if: |
          steps.pr-details.outputs.should-merge == 'true' &&
          steps.check-status.outputs.can-merge == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.pr-details.outputs.pr-number }}"
          PR_AUTHOR="${{ steps.pr-details.outputs.pr-author }}"
          PR_LABELS="${{ steps.pr-details.outputs.pr-labels }}"

          echo "Enabling auto-merge for PR #$PR_NUMBER by $PR_AUTHOR"

          # Determine merge method based on PR type
          if [[ "$PR_AUTHOR" == "dependabot[bot]" ]]; then
            # Squash merge for dependabot updates
            MERGE_METHOD="--squash"
          elif [[ "$PR_LABELS" == *"autorelease"* ]]; then
            # Merge commit for release PRs to preserve history
            MERGE_METHOD="--merge"
          else
            # Default to squash
            MERGE_METHOD="--squash"
          fi

          # Enable auto-merge
          gh pr merge $PR_NUMBER \
            --repo ${{ github.repository }} \
            --auto \
            $MERGE_METHOD \
            --delete-branch || echo "Auto-merge may already be enabled"

          # If all checks have already passed, try to merge immediately
          if [[ "${{ steps.pr-details.outputs.pr-mergeable-state }}" == "clean" ]]; then
            echo "All checks passed, attempting immediate merge"
            gh pr merge $PR_NUMBER \
              --repo ${{ github.repository }} \
              $MERGE_METHOD \
              --delete-branch || echo "Could not merge immediately, auto-merge is enabled"

            # If this was a Release PR, the merge push will trigger Release-Please to publish
            if [[ "$PR_LABELS" == *"autorelease"* ]]; then
              echo "Release PR merged, Release-Please will publish via push trigger (see .github/workflows/release-please.yml:4-9)"
            fi
          fi