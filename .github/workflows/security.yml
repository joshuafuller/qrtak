name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Weekly comprehensive scan
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      deep_scan:
        description: 'Run deep security scan'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  # Code and dependency scanning
  code-scanning:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.0.1
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          PUPPETEER_SKIP_DOWNLOAD: true
          npm_config_package_lock: false

      # Secret Detection
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@0f58ae7c5036094a1e3e750d18772af92821b503 # v3.78.1
        with:
          base: "${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before || github.event.repository.default_branch }}"
          head: "${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"
          extra_args: --debug --only-verified

      # SAST with Semgrep
      - name: Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

      # Dependency Scanning
      - name: npm audit
        run: npm audit --production --audit-level=moderate || true

      - name: Snyk Security Scan
        if: github.actor != 'dependabot[bot]'
        uses: snyk/actions/node@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: OSV Scanner
        run: |
          curl -sSfL https://github.com/google/osv-scanner/releases/download/v1.9.1/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          ./osv-scanner --format sarif . > osv-results.sarif || true
          
      - name: Upload OSV results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: osv-results.sarif
          category: osv

  # Container Security
  container-scanning:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    if: |
      contains(github.event.head_commit.message, '[docker]') ||
      contains(fromJson('["push", "workflow_dispatch"]'), github.event_name) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'docker'))
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Build Docker image
        run: docker build -t qrtak:scan .

      # Trivy Scan
      - name: Run Trivy
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # v0.24.0
        with:
          image-ref: qrtak:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      # Grype Scan
      - name: Run Grype
        uses: anchore/scan-action@16910ac423301c6d30554b83a7f71ac6ff4a51f3 # v6.4.0
        id: grype
        with:
          image: qrtak:scan
          fail-build: false
          severity-cutoff: high
          output-format: sarif

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          category: 'grype'

  # Supply Chain Security
  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.0.1
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          PUPPETEER_SKIP_DOWNLOAD: true
          npm_config_package_lock: false

      # Generate SBOM
      - name: Generate SBOM
        uses: anchore/sbom-action@61119d458adab75f756bc0b9e4bde25725f86a7a # v0.17.2
        with:
          format: spdx-json
          output-file: sbom.spdx.json
          upload-artifact: true
          upload-artifact-retention: 30

      # Check for typosquatting
      - name: Check for typosquatting
        run: |
          # Verify qrcode package is the legitimate one
          QRCODE_REPO=$(npm view qrcode repository.url 2>/dev/null || echo "")
          if [[ "$QRCODE_REPO" != *"github.com/soldair/node-qrcode"* ]]; then
            echo "ERROR: qrcode package appears to be from wrong source!"
            echo "Expected: github.com/soldair/node-qrcode"
            echo "Got: $QRCODE_REPO"
            exit 1
          fi
          
          # Check for typosquatting patterns in other packages
          npm ls --depth=0 --json 2>/dev/null | jq -r '.dependencies | keys[]' | while read pkg; do
            # Skip our verified packages
            if [ "$pkg" = "qrcode" ]; then
              echo "âœ“ qrcode - verified legitimate package"
              continue
            fi
            
            # Check for suspicious patterns
            if echo "$pkg" | grep -E "(qrcod[^e]|qr-cod|qrcode[0-9]|vit[0-9]|jes[0-9])" > /dev/null; then
              echo "WARNING: Potential typosquatting detected: $pkg"
              exit 1
            fi
          done

  # Fuzz Testing
  fuzz-testing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deep_scan == 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.0.1
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev @jazzer.js/core
        env:
          PUPPETEER_SKIP_DOWNLOAD: true
          npm_config_package_lock: false

      - name: Create fuzz test directory
        run: mkdir -p tests

      - name: Run Fuzz Tests
        run: |
          echo "Running fuzz tests..."
          # Quick fuzz for PRs (10 seconds), longer for scheduled runs (5 minutes)
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            FUZZ_TIME=300000  # 5 minutes for scheduled runs
          else
            FUZZ_TIME=10000   # 10 seconds for PRs
          fi
          echo "Fuzzing for $((FUZZ_TIME/1000)) seconds..."
          npx jazzer fuzz tests/fuzz.test.js --sync_timeout=30000 --time_limit_ms=$FUZZ_TIME || true
          echo "Fuzz testing completed"
        continue-on-error: true